{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Demo Composables"},{"location":"#features","title":"Features","text":"<p>This library offers you an easily extendible compose framework for modal dialogs and allows to show them as a dialog, bottom sheet or even as full screen dialog.</p> <p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library which supports following platforms.</p> android ios windows macos wasm Info            \u2714                     \u2714                     \u2714                     \u2714                     \u2714"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.8.2</code> Uses jetpack compose <code>1.8.2</code> and material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental. I will provide new versions as soon as possible if experimental APIs change or become stable.</p> <p>This library does not have any dependencies!</p>"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val demoComposables = \"&lt;LATEST-VERSION&gt;\"\n\nimplementation(\"io.github.mflisar.democomposables:library:$demoComposables\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\ndemoComposables = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\ndemoComposables = { module = \"io.github.mflisar.democomposables:library\", version.ref = \"demoComposables\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code>implementation(libs.demoComposables)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-examples","title":"Basic examples","text":"<pre><code>// mostly this library just provides composables like following:\nDemo*(...)\n</code></pre> <p>Info</p> <p>This library has a documentation page but still is meant for my personal usage. I do use it in my demo apps to provide some reusable composables.</p>"}]}